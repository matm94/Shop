// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Db;

namespace Shop.API.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20210629131756_poczatkowa")]
    partial class poczatkowa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.4.21253.1")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shop.Core.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double>("ShipmentPrice")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderDbSet");
                });

            modelBuilder.Entity("Shop.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ProductDbSet");
                });

            modelBuilder.Entity("Shop.Core.Domain.TapeBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixturesColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Handle")
                        .HasColumnType("bit");

                    b.Property<double>("Lenght")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TapeBasesDbSet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TapeBase");
                });

            modelBuilder.Entity("Shop.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserDbSet");
                });

            modelBuilder.Entity("Shop.Core.Domain.Collar", b =>
                {
                    b.HasBaseType("Shop.Core.Domain.TapeBase");

                    b.Property<string>("ClaspType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Collar_ClaspType");

                    b.Property<double>("NeckCircuit")
                        .HasColumnType("float");

                    b.Property<bool>("PetIdRing")
                        .HasColumnType("bit")
                        .HasColumnName("Collar_PetIdRing");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Collar");
                });

            modelBuilder.Entity("Shop.Core.Domain.NormalLeash", b =>
                {
                    b.HasBaseType("Shop.Core.Domain.TapeBase");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("NormalLeash");
                });

            modelBuilder.Entity("Shop.Core.Domain.ReversibleLeash", b =>
                {
                    b.HasBaseType("Shop.Core.Domain.TapeBase");

                    b.Property<double>("CirclePositionLength")
                        .HasColumnType("float");

                    b.Property<bool>("StandardCirclePosition")
                        .HasColumnType("bit");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ReversibleLeash");
                });

            modelBuilder.Entity("Shop.Core.Domain.Suspenders", b =>
                {
                    b.HasBaseType("Shop.Core.Domain.TapeBase");

                    b.Property<double>("ChestCircuit")
                        .HasColumnType("float");

                    b.Property<double>("ChestShoulderDistanceDown")
                        .HasColumnType("float");

                    b.Property<double>("ChestShoulderDistanceUp")
                        .HasColumnType("float");

                    b.Property<string>("ClaspType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PetIdRing")
                        .HasColumnType("bit");

                    b.Property<bool>("SemiRing")
                        .HasColumnType("bit");

                    b.Property<double>("ShoulderCircuit")
                        .HasColumnType("float");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Suspenders");
                });

            modelBuilder.Entity("Shop.Core.Domain.TrainingLeash", b =>
                {
                    b.HasBaseType("Shop.Core.Domain.TapeBase");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("TrainingLeash");
                });

            modelBuilder.Entity("Shop.Core.Domain.Product", b =>
                {
                    b.HasOne("Shop.Core.Domain.Order", "Order")
                        .WithOne("Product")
                        .HasForeignKey("Shop.Core.Domain.Product", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shop.Core.Domain.Collar", b =>
                {
                    b.HasOne("Shop.Core.Domain.Product", "Product")
                        .WithMany("Collars")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Core.Domain.NormalLeash", b =>
                {
                    b.HasOne("Shop.Core.Domain.Product", "Product")
                        .WithMany("NormalLeashes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Core.Domain.ReversibleLeash", b =>
                {
                    b.HasOne("Shop.Core.Domain.Product", "Product")
                        .WithMany("ReversibleLeashes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Core.Domain.Suspenders", b =>
                {
                    b.HasOne("Shop.Core.Domain.Product", "Product")
                        .WithMany("Suspenders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Core.Domain.TrainingLeash", b =>
                {
                    b.HasOne("Shop.Core.Domain.Product", "Product")
                        .WithMany("TrainingLeashes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Core.Domain.Order", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Core.Domain.Product", b =>
                {
                    b.Navigation("Collars");

                    b.Navigation("NormalLeashes");

                    b.Navigation("ReversibleLeashes");

                    b.Navigation("Suspenders");

                    b.Navigation("TrainingLeashes");
                });
#pragma warning restore 612, 618
        }
    }
}
